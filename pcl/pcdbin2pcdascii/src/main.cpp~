#include <iostream>
#include <vector>

#include <pcl/io/pcd_io.h>
#include <pcl/point_types.h>
#include <pcl/features/normal_3d.h>
#include <pcl/features/spin_image.h>
#include <pcl/visualization/cloud_viewer.h>

using namespace std;

//int main (int, char** argv)
//{
//  std::string filename = argv[1];
//  std::cout << "Reading " << filename << std::endl;
//  pcl::PointCloud<pcl::PointXYZ>::Ptr cloud (new pcl::PointCloud<pcl::PointXYZ>);

//  if (pcl::io::loadPCDFile <pcl::PointXYZ> (filename.c_str (), *cloud) == -1)
//  // load the file
//  {
//    PCL_ERROR ("Couldn't read file");
//    return (-1);
//  }
//  std::cout << "Loaded " << cloud->points.size () << " points." << std::endl;

//  // Compute the normals
//  pcl::NormalEstimation<pcl::PointXYZ, pcl::Normal> normal_estimation;
//  normal_estimation.setInputCloud (cloud);

//  pcl::search::KdTree<pcl::PointXYZ>::Ptr kdtree (new pcl::search::KdTree<pcl::PointXYZ>);
//  normal_estimation.setSearchMethod (kdtree);

//  pcl::PointCloud<pcl::Normal>::Ptr normals (new pcl::PointCloud< pcl::Normal>);
//  normal_estimation.setRadiusSearch (0.1);
//  normal_estimation.compute (*normals);
//	cout << "Normal estimation done." << endl;

//  // Setup spin image computation
//  pcl::SpinImageEstimation<pcl::PointXYZ, pcl::Normal, pcl::Histogram<153> > spin_image_descriptor(8, 0.5, 16);
//  spin_image_descriptor.setInputCloud (cloud);
//  spin_image_descriptor.setInputNormals (normals);

//  // Use the same KdTree from the normal estimation
//  spin_image_descriptor.setSearchMethod (kdtree);
//  pcl::PointCloud<pcl::Histogram<153> >::Ptr spin_images (new pcl::PointCloud<pcl::Histogram<153> >);
//  spin_image_descriptor.setRadiusSearch (2.5);

//  // Actually compute the spin images
//  spin_image_descriptor.compute (*spin_images);
//  std::cout << "SI output points.size (): " << spin_images->points.size () << std::endl;

//  // Display and retrieve the spin image descriptor vector for the first point.
//  pcl::Histogram<153> first_descriptor = spin_images->points[0];
//  std::cout << first_descriptor << std::endl;

//  return 0;
//}


int main (int argc, char** argv)
{
	if(argc != 2)
	{
		cout << "Incorrect number of arguments. Usage: spinextract <PCD File>" << endl;
		return -2;
	}

	pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud(new pcl::PointCloud<pcl::PointXYZRGB>);
	if(pcl::io::loadPCDFile<pcl::PointXYZRGB>(argv[1], *cloud) == -1) //* load the file
	{
		PCL_ERROR ("Couldn't read file \n");
		return -1;
	}
	cout << "Loaded "
			<< cloud->width * cloud->height
		    << " data points from .pcd file with the following fields: "
		    << std::endl;

// CODE TO EXTRACT RGB
//	for(size_t i = 0; i < cloud->points.size(); ++i)
//	{
//		uint32_t rgb = *reinterpret_cast<int*>(&cloud->points[i].rgb);

//		uint8_t r = (rgb >> 16) & 0x0000ff;
//		uint8_t g = (rgb >> 8)  & 0x0000ff;
//		uint8_t b = (rgb)       & 0x0000ff;

//		cout << +r << ", " << +g << ", " << +b << endl;
//	}

	pcl::visualization::CloudViewer viewer("Simple Cloud Viewer");
	viewer.showCloud(cloud);
	while(!viewer.wasStopped())
	{

	}

	return 0;
}

